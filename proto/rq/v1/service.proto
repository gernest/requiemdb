syntax = "proto3";
package v1;
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "opentelemetry/proto/common/v1/common.proto";
import "opentelemetry/proto/metrics/v1/metrics.proto";
import "opentelemetry/proto/logs/v1/logs.proto";
import "opentelemetry/proto/trace/v1/trace.proto";
import "rq/v1/scan.proto";

service RQ {
  rpc Query(QueryRequest) returns (QueryResponse) {
    option (google.api.http) = {
      post : "/api/v1/query",
      body : "*"
    };
  };

  rpc GetVersion(GetVersionRequest) returns (Version) {
    option (google.api.http) = {
      get : "/api/v1/version",
    };
  };
}

message GetVersionRequest {}
message Version { string version = 1; }

message QueryRequest {

  // A typescript/javascript content to execute.
  bytes query = 1;

  // when true any logs associated with script execution will be included in the
  // response.
  bool include_logs = 3;
}

message QueryResponse {
  Result result = 1;
  Timings timings = 2;
  // console.log output. This is gzipped stream.
  bytes logs = 3;
}

message Result {
  oneof result {
    Data data = 1;
    google.protobuf.Struct custom = 2;
  }
}

message Timings {
  // Time taken to compile the query snippet before evealuation.
  google.protobuf.Duration compiling = 1;
  // Time taken to evaluate compiled query.
  google.protobuf.Duration evaluating = 2;
}
