syntax = "proto3";
package v1;
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "opentelemetry/proto/resource/v1/resource.proto";
import "opentelemetry/proto/common/v1/common.proto";
import "opentelemetry/proto/metrics/v1/metrics.proto";
import "opentelemetry/proto/logs/v1/logs.proto";
import "opentelemetry/proto/trace/v1/trace.proto";

message Format {
  oneof data {
    Metric metric = 1;
    LogRecord log = 2;
    Span span = 3;
  }
}

message Span {
  uint64 row_id = 50;
  bytes trace_id = 1;
  bytes span_id = 2;
  string trace_state = 3;
  bytes parent_span_id = 4;
  fixed32 flags = 16;
  string name = 5;
  opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;
  fixed64 start_time_unix_nano = 7;
  fixed64 end_time_unix_nano = 8;
  repeated opentelemetry.proto.common.v1.KeyValue attributes = 9;
  repeated opentelemetry.proto.trace.v1.Span.Event events = 11;
  repeated opentelemetry.proto.trace.v1.Span.Link links = 12;
  repeated opentelemetry.proto.trace.v1.Status status = 13;
}

message LogRecord {
  uint64 row_id = 50;
  fixed64 time_unix_nano = 1;
  fixed64 observed_time_unix_nano = 11;
  opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
  string severity_text = 3;
  opentelemetry.proto.common.v1.AnyValue body = 5;
  repeated opentelemetry.proto.common.v1.KeyValue attributes = 6;
  bytes trace_id = 9;
  bytes span_id = 10;
}

message Metric {
  // name of the metric.
  string name = 1;

  // description of the metric, which can be used in documentation.
  string description = 2;

  // unit in which the metric value is reported. Follows the format
  // described by http://unitsofmeasure.org/ucum.html.
  string unit = 3;

  string resource_schema = 4;
  opentelemetry.proto.resource.v1.Resource resource = 5;

  string scope_schema = 6;
  opentelemetry.proto.common.v1.InstrumentationScope scope = 7;

  uint64 resource_hash = 8;
  uint64 scope_hash = 9;
  uint64 hash = 10;

  oneof data {
    Gauge gauge = 11;
    Sum sum = 12;
    Histogram histogram = 13;
    ExponentialHistogram exponential_histogram = 14;
    Summary summary = 15;
  }
  repeated opentelemetry.proto.common.v1.KeyValue metadata = 16;
}

message Gauge { opentelemetry.proto.metrics.v1.NumberDataPoint data_point = 1; }

message Sum {
  opentelemetry.proto.metrics.v1.NumberDataPoint data_point = 1;
  opentelemetry.proto.metrics.v1.AggregationTemporality
      aggregation_temporality = 2;
  bool is_monotonic = 3;
}

message Histogram {
  opentelemetry.proto.metrics.v1.HistogramDataPoint data_point = 1;
  opentelemetry.proto.metrics.v1.AggregationTemporality
      aggregation_temporality = 2;
}

message ExponentialHistogram {
  opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint data_point = 1;
  opentelemetry.proto.metrics.v1.AggregationTemporality
      aggregation_temporality = 2;
}

message Summary {
  opentelemetry.proto.metrics.v1.SummaryDataPoint data_point = 1;
}
