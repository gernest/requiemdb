syntax = "proto3";
package v1;
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "opentelemetry/proto/resource/v1/resource.proto";
import "opentelemetry/proto/common/v1/common.proto";
import "opentelemetry/proto/metrics/v1/metrics.proto";
import "opentelemetry/proto/logs/v1/logs.proto";
import "opentelemetry/proto/trace/v1/trace.proto";

message Span {
  uint64 row_id = 50;
  bytes trace_id = 1;
  bytes span_id = 2;
  string trace_state = 3;
  bytes parent_span_id = 4;
  fixed32 flags = 16;
  string name = 5;
  opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;
  fixed64 start_time_unix_nano = 7;
  fixed64 end_time_unix_nano = 8;
  repeated opentelemetry.proto.common.v1.KeyValue attributes = 9;
  repeated opentelemetry.proto.trace.v1.Span.Event events = 11;
  repeated opentelemetry.proto.trace.v1.Span.Link links = 12;
  repeated opentelemetry.proto.trace.v1.Status status = 13;
}

message LogRecord {
  uint64 row_id = 50;
  fixed64 time_unix_nano = 1;
  fixed64 observed_time_unix_nano = 11;
  opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
  string severity_text = 3;
  opentelemetry.proto.common.v1.AnyValue body = 5;
  repeated opentelemetry.proto.common.v1.KeyValue attributes = 6;
  bytes trace_id = 9;
  bytes span_id = 10;
}

message Metric {
  // name of the metric.
  string name = 1;

  // description of the metric, which can be used in documentation.
  string description = 2;

  // unit in which the metric value is reported. Follows the format
  // described by http://unitsofmeasure.org/ucum.html.
  string unit = 3;

  Kind kind = 4;

  enum Kind {
    GAUGE = 0;
    SUM = 1;
    HISTOGRAM = 2;
    EXPONENTIAL_HISTOGRAM = 3;
    SUMMARY = 4;
  }
  repeated opentelemetry.proto.common.v1.KeyValue attributes = 5;
  fixed64 start_time_unix_nano = 6;
  fixed64 time_unix_nano = 7;
  repeated opentelemetry.proto.metrics.v1.Exemplar exemplars = 10;

  optional double gauge = 11;
  optional double counter = 12;
  HistogramDataPoint histogram = 13;
  ExponentialHistogramDataPoint exponential_histogram = 14;
  SummaryDataPoint summary = 15;
  uint64 hash = 16;
  uint64 id = 17;
  opentelemetry.proto.metrics.v1.AggregationTemporality
      aggregation_temporality = 18;
  bool is_monotonic = 19;
}

message HistogramDataPoint {
  fixed64 count = 4;
  optional double sum = 5;
  repeated fixed64 bucket_counts = 6;
  repeated double explicit_bounds = 7;
  optional double min = 11;
  optional double max = 12;
}

message ExponentialHistogramDataPoint {
  fixed64 count = 4;
  optional double sum = 5;
  sint32 scale = 6;
  fixed64 zero_count = 7;
  opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets
      positive = 8;
  opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets
      negative = 9;
  optional double min = 12;
  optional double max = 13;
  double zero_threshold = 14;
}

message SummaryDataPoint {
  fixed64 count = 4;
  double sum = 5;
  repeated opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile
      quantile_values = 6;
}
