// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: rq/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RQ_ScanSamples_FullMethodName = "/v1.RQ/ScanSamples"
	RQ_GetVersion_FullMethodName  = "/v1.RQ/GetVersion"
)

// RQClient is the client API for RQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RQClient interface {
	ScanSamples(ctx context.Context, in *Scan, opts ...grpc.CallOption) (*Data, error)
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*Version, error)
}

type rQClient struct {
	cc grpc.ClientConnInterface
}

func NewRQClient(cc grpc.ClientConnInterface) RQClient {
	return &rQClient{cc}
}

func (c *rQClient) ScanSamples(ctx context.Context, in *Scan, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, RQ_ScanSamples_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rQClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, RQ_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RQServer is the server API for RQ service.
// All implementations must embed UnimplementedRQServer
// for forward compatibility
type RQServer interface {
	ScanSamples(context.Context, *Scan) (*Data, error)
	GetVersion(context.Context, *GetVersionRequest) (*Version, error)
	mustEmbedUnimplementedRQServer()
}

// UnimplementedRQServer must be embedded to have forward compatible implementations.
type UnimplementedRQServer struct {
}

func (UnimplementedRQServer) ScanSamples(context.Context, *Scan) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanSamples not implemented")
}
func (UnimplementedRQServer) GetVersion(context.Context, *GetVersionRequest) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedRQServer) mustEmbedUnimplementedRQServer() {}

// UnsafeRQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RQServer will
// result in compilation errors.
type UnsafeRQServer interface {
	mustEmbedUnimplementedRQServer()
}

func RegisterRQServer(s grpc.ServiceRegistrar, srv RQServer) {
	s.RegisterService(&RQ_ServiceDesc, srv)
}

func _RQ_ScanSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Scan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RQServer).ScanSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RQ_ScanSamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RQServer).ScanSamples(ctx, req.(*Scan))
	}
	return interceptor(ctx, in, info, handler)
}

func _RQ_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RQServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RQ_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RQServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RQ_ServiceDesc is the grpc.ServiceDesc for RQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RQ",
	HandlerType: (*RQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanSamples",
			Handler:    _RQ_ScanSamples_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _RQ_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rq/v1/service.proto",
}
