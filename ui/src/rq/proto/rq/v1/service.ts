// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "rq/v1/service.proto" (package "v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../google/protobuf/duration";
import { Struct } from "../../google/protobuf/struct";
import { Data } from "./scan";
/**
 * @generated from protobuf message v1.GetVersionRequest
 */
export interface GetVersionRequest {
}
/**
 * @generated from protobuf message v1.Version
 */
export interface Version {
    /**
     * @generated from protobuf field: string version = 1;
     */
    version: string;
}
/**
 * @generated from protobuf message v1.QueryRequest
 */
export interface QueryRequest {
    /**
     * A typescript/javascript content to execute.
     *
     * @generated from protobuf field: bytes query = 1;
     */
    query: Uint8Array;
    /**
     * when true any logs associated with script execution will be included in the
     * response.
     *
     * @generated from protobuf field: bool include_logs = 3;
     */
    includeLogs: boolean;
}
/**
 * @generated from protobuf message v1.QueryResponse
 */
export interface QueryResponse {
    /**
     * @generated from protobuf field: v1.Result result = 1;
     */
    result?: Result;
    /**
     * @generated from protobuf field: v1.Timings timings = 2;
     */
    timings?: Timings;
    /**
     * console.log output. This is gzipped stream.
     *
     * @generated from protobuf field: bytes logs = 3;
     */
    logs: Uint8Array;
}
/**
 * @generated from protobuf message v1.Result
 */
export interface Result {
    /**
     * @generated from protobuf oneof: result
     */
    result: {
        oneofKind: "data";
        /**
         * @generated from protobuf field: v1.Data data = 1;
         */
        data: Data;
    } | {
        oneofKind: "custom";
        /**
         * @generated from protobuf field: google.protobuf.Struct custom = 2;
         */
        custom: Struct;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message v1.Timings
 */
export interface Timings {
    /**
     * Time taken to compile the query snippet before evealuation.
     *
     * @generated from protobuf field: google.protobuf.Duration compiling = 1;
     */
    compiling?: Duration;
    /**
     * Time taken to evaluate compiled query.
     *
     * @generated from protobuf field: google.protobuf.Duration evaluating = 2;
     */
    evaluating?: Duration;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetVersionRequest$Type extends MessageType<GetVersionRequest> {
    constructor() {
        super("v1.GetVersionRequest", []);
    }
    create(value?: PartialMessage<GetVersionRequest>): GetVersionRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetVersionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetVersionRequest): GetVersionRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetVersionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.GetVersionRequest
 */
export const GetVersionRequest = new GetVersionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Version$Type extends MessageType<Version> {
    constructor() {
        super("v1.Version", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Version>): Version {
        const message = { version: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Version>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Version): Version {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Version, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Version
 */
export const Version = new Version$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryRequest$Type extends MessageType<QueryRequest> {
    constructor() {
        super("v1.QueryRequest", [
            { no: 1, name: "query", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "include_logs", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<QueryRequest>): QueryRequest {
        const message = { query: new Uint8Array(0), includeLogs: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryRequest): QueryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes query */ 1:
                    message.query = reader.bytes();
                    break;
                case /* bool include_logs */ 3:
                    message.includeLogs = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes query = 1; */
        if (message.query.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.query);
        /* bool include_logs = 3; */
        if (message.includeLogs !== false)
            writer.tag(3, WireType.Varint).bool(message.includeLogs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.QueryRequest
 */
export const QueryRequest = new QueryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryResponse$Type extends MessageType<QueryResponse> {
    constructor() {
        super("v1.QueryResponse", [
            { no: 1, name: "result", kind: "message", T: () => Result },
            { no: 2, name: "timings", kind: "message", T: () => Timings },
            { no: 3, name: "logs", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<QueryResponse>): QueryResponse {
        const message = { logs: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryResponse): QueryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Result result */ 1:
                    message.result = Result.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                case /* v1.Timings timings */ 2:
                    message.timings = Timings.internalBinaryRead(reader, reader.uint32(), options, message.timings);
                    break;
                case /* bytes logs */ 3:
                    message.logs = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Result result = 1; */
        if (message.result)
            Result.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* v1.Timings timings = 2; */
        if (message.timings)
            Timings.internalBinaryWrite(message.timings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bytes logs = 3; */
        if (message.logs.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.logs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.QueryResponse
 */
export const QueryResponse = new QueryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Result$Type extends MessageType<Result> {
    constructor() {
        super("v1.Result", [
            { no: 1, name: "data", kind: "message", oneof: "result", T: () => Data },
            { no: 2, name: "custom", kind: "message", oneof: "result", T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<Result>): Result {
        const message = { result: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Result>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Result): Result {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Data data */ 1:
                    message.result = {
                        oneofKind: "data",
                        data: Data.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).data)
                    };
                    break;
                case /* google.protobuf.Struct custom */ 2:
                    message.result = {
                        oneofKind: "custom",
                        custom: Struct.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).custom)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Result, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Data data = 1; */
        if (message.result.oneofKind === "data")
            Data.internalBinaryWrite(message.result.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Struct custom = 2; */
        if (message.result.oneofKind === "custom")
            Struct.internalBinaryWrite(message.result.custom, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Result
 */
export const Result = new Result$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Timings$Type extends MessageType<Timings> {
    constructor() {
        super("v1.Timings", [
            { no: 1, name: "compiling", kind: "message", T: () => Duration },
            { no: 2, name: "evaluating", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<Timings>): Timings {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Timings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Timings): Timings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration compiling */ 1:
                    message.compiling = Duration.internalBinaryRead(reader, reader.uint32(), options, message.compiling);
                    break;
                case /* google.protobuf.Duration evaluating */ 2:
                    message.evaluating = Duration.internalBinaryRead(reader, reader.uint32(), options, message.evaluating);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Timings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration compiling = 1; */
        if (message.compiling)
            Duration.internalBinaryWrite(message.compiling, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration evaluating = 2; */
        if (message.evaluating)
            Duration.internalBinaryWrite(message.evaluating, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Timings
 */
export const Timings = new Timings$Type();
/**
 * @generated ServiceType for protobuf service v1.RQ
 */
export const RQ = new ServiceType("v1.RQ", [
    { name: "Query", options: { "google.api.http": { post: "/api/v1/query", body: "*" } }, I: QueryRequest, O: QueryResponse },
    { name: "GetVersion", options: { "google.api.http": { get: "/api/v1/version" } }, I: GetVersionRequest, O: Version }
]);
