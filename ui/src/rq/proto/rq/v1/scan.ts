// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "rq/v1/scan.proto" (package "v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp";
/**
 * @generated from protobuf message v1.Scan
 */
export interface Scan {
    /**
     * @generated from protobuf field: v1.Scan.SCOPE scope = 1;
     */
    scope: Scan_SCOPE;
    /**
     * @generated from protobuf field: v1.Scan.TimeRange time_range = 2;
     */
    timeRange?: Scan_TimeRange;
    /**
     * @generated from protobuf field: repeated v1.Scan.Filter filters = 3;
     */
    filters: Scan_Filter[];
}
/**
 * @generated from protobuf message v1.Scan.Filter
 */
export interface Scan_Filter {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "base";
        /**
         * @generated from protobuf field: v1.Scan.BaseFilter base = 1;
         */
        base: Scan_BaseFilter;
    } | {
        oneofKind: "attr";
        /**
         * @generated from protobuf field: v1.Scan.AttrFilter attr = 2;
         */
        attr: Scan_AttrFilter;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message v1.Scan.BaseFilter
 */
export interface Scan_BaseFilter {
    /**
     * @generated from protobuf field: v1.Scan.BaseProp prop = 1;
     */
    prop: Scan_BaseProp;
    /**
     * @generated from protobuf field: bytes value = 2;
     */
    value: Uint8Array;
}
/**
 * @generated from protobuf message v1.Scan.AttrFilter
 */
export interface Scan_AttrFilter {
    /**
     * @generated from protobuf field: v1.Scan.AttributeProp prop = 1;
     */
    prop: Scan_AttributeProp;
    /**
     * @generated from protobuf field: bytes key = 2;
     */
    key: Uint8Array;
    /**
     * @generated from protobuf field: bytes value = 3;
     */
    value: Uint8Array;
}
/**
 * @generated from protobuf message v1.Scan.TimeRange
 */
export interface Scan_TimeRange {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp start = 1;
     */
    start?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp end = 2;
     */
    end?: Timestamp;
}
/**
 * @generated from protobuf enum v1.Scan.SCOPE
 */
export enum Scan_SCOPE {
    /**
     * @generated from protobuf enum value: METRICS = 0;
     */
    METRICS = 0,
    /**
     * @generated from protobuf enum value: TRACES = 2;
     */
    TRACES = 2,
    /**
     * @generated from protobuf enum value: LOGS = 3;
     */
    LOGS = 3,
    /**
     * @generated from protobuf enum value: SNIPPETS = 4;
     */
    SNIPPETS = 4
}
/**
 * @generated from protobuf enum v1.Scan.BaseProp
 */
export enum Scan_BaseProp {
    /**
     * @generated from protobuf enum value: RESOURCE_SCHEMA = 0;
     */
    RESOURCE_SCHEMA = 0,
    /**
     * @generated from protobuf enum value: SCOPE_SCHEMA = 2;
     */
    SCOPE_SCHEMA = 2,
    /**
     * @generated from protobuf enum value: SCOPE_NAME = 3;
     */
    SCOPE_NAME = 3,
    /**
     * @generated from protobuf enum value: SCOPE_VERSION = 4;
     */
    SCOPE_VERSION = 4,
    /**
     * @generated from protobuf enum value: NAME = 6;
     */
    NAME = 6,
    /**
     * @generated from protobuf enum value: TRACE_ID = 8;
     */
    TRACE_ID = 8,
    /**
     * @generated from protobuf enum value: SPAN_ID = 9;
     */
    SPAN_ID = 9,
    /**
     * @generated from protobuf enum value: PARENT_SPAN_ID = 10;
     */
    PARENT_SPAN_ID = 10,
    /**
     * @generated from protobuf enum value: LOGS_LEVEL = 11;
     */
    LOGS_LEVEL = 11
}
/**
 * @generated from protobuf enum v1.Scan.AttributeProp
 */
export enum Scan_AttributeProp {
    /**
     * @generated from protobuf enum value: UNKOWN_ATTR = 0;
     */
    UNKOWN_ATTR = 0,
    /**
     * @generated from protobuf enum value: RESOURCE_ATTRIBUTES = 1;
     */
    RESOURCE_ATTRIBUTES = 1,
    /**
     * @generated from protobuf enum value: SCOPE_ATTRIBUTES = 5;
     */
    SCOPE_ATTRIBUTES = 5,
    /**
     * @generated from protobuf enum value: ATTRIBUTES = 7;
     */
    ATTRIBUTES = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class Scan$Type extends MessageType<Scan> {
    constructor() {
        super("v1.Scan", [
            { no: 1, name: "scope", kind: "enum", T: () => ["v1.Scan.SCOPE", Scan_SCOPE] },
            { no: 2, name: "time_range", kind: "message", T: () => Scan_TimeRange },
            { no: 3, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Scan_Filter }
        ]);
    }
    create(value?: PartialMessage<Scan>): Scan {
        const message = { scope: 0, filters: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Scan>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Scan): Scan {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Scan.SCOPE scope */ 1:
                    message.scope = reader.int32();
                    break;
                case /* v1.Scan.TimeRange time_range */ 2:
                    message.timeRange = Scan_TimeRange.internalBinaryRead(reader, reader.uint32(), options, message.timeRange);
                    break;
                case /* repeated v1.Scan.Filter filters */ 3:
                    message.filters.push(Scan_Filter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Scan, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Scan.SCOPE scope = 1; */
        if (message.scope !== 0)
            writer.tag(1, WireType.Varint).int32(message.scope);
        /* v1.Scan.TimeRange time_range = 2; */
        if (message.timeRange)
            Scan_TimeRange.internalBinaryWrite(message.timeRange, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated v1.Scan.Filter filters = 3; */
        for (let i = 0; i < message.filters.length; i++)
            Scan_Filter.internalBinaryWrite(message.filters[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Scan
 */
export const Scan = new Scan$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Scan_Filter$Type extends MessageType<Scan_Filter> {
    constructor() {
        super("v1.Scan.Filter", [
            { no: 1, name: "base", kind: "message", oneof: "value", T: () => Scan_BaseFilter },
            { no: 2, name: "attr", kind: "message", oneof: "value", T: () => Scan_AttrFilter }
        ]);
    }
    create(value?: PartialMessage<Scan_Filter>): Scan_Filter {
        const message = { value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Scan_Filter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Scan_Filter): Scan_Filter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Scan.BaseFilter base */ 1:
                    message.value = {
                        oneofKind: "base",
                        base: Scan_BaseFilter.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).base)
                    };
                    break;
                case /* v1.Scan.AttrFilter attr */ 2:
                    message.value = {
                        oneofKind: "attr",
                        attr: Scan_AttrFilter.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).attr)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Scan_Filter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Scan.BaseFilter base = 1; */
        if (message.value.oneofKind === "base")
            Scan_BaseFilter.internalBinaryWrite(message.value.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* v1.Scan.AttrFilter attr = 2; */
        if (message.value.oneofKind === "attr")
            Scan_AttrFilter.internalBinaryWrite(message.value.attr, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Scan.Filter
 */
export const Scan_Filter = new Scan_Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Scan_BaseFilter$Type extends MessageType<Scan_BaseFilter> {
    constructor() {
        super("v1.Scan.BaseFilter", [
            { no: 1, name: "prop", kind: "enum", T: () => ["v1.Scan.BaseProp", Scan_BaseProp] },
            { no: 2, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Scan_BaseFilter>): Scan_BaseFilter {
        const message = { prop: 0, value: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Scan_BaseFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Scan_BaseFilter): Scan_BaseFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Scan.BaseProp prop */ 1:
                    message.prop = reader.int32();
                    break;
                case /* bytes value */ 2:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Scan_BaseFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Scan.BaseProp prop = 1; */
        if (message.prop !== 0)
            writer.tag(1, WireType.Varint).int32(message.prop);
        /* bytes value = 2; */
        if (message.value.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Scan.BaseFilter
 */
export const Scan_BaseFilter = new Scan_BaseFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Scan_AttrFilter$Type extends MessageType<Scan_AttrFilter> {
    constructor() {
        super("v1.Scan.AttrFilter", [
            { no: 1, name: "prop", kind: "enum", T: () => ["v1.Scan.AttributeProp", Scan_AttributeProp] },
            { no: 2, name: "key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Scan_AttrFilter>): Scan_AttrFilter {
        const message = { prop: 0, key: new Uint8Array(0), value: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Scan_AttrFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Scan_AttrFilter): Scan_AttrFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Scan.AttributeProp prop */ 1:
                    message.prop = reader.int32();
                    break;
                case /* bytes key */ 2:
                    message.key = reader.bytes();
                    break;
                case /* bytes value */ 3:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Scan_AttrFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Scan.AttributeProp prop = 1; */
        if (message.prop !== 0)
            writer.tag(1, WireType.Varint).int32(message.prop);
        /* bytes key = 2; */
        if (message.key.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.key);
        /* bytes value = 3; */
        if (message.value.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Scan.AttrFilter
 */
export const Scan_AttrFilter = new Scan_AttrFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Scan_TimeRange$Type extends MessageType<Scan_TimeRange> {
    constructor() {
        super("v1.Scan.TimeRange", [
            { no: 1, name: "start", kind: "message", T: () => Timestamp },
            { no: 2, name: "end", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Scan_TimeRange>): Scan_TimeRange {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Scan_TimeRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Scan_TimeRange): Scan_TimeRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp start */ 1:
                    message.start = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.start);
                    break;
                case /* google.protobuf.Timestamp end */ 2:
                    message.end = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.end);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Scan_TimeRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp start = 1; */
        if (message.start)
            Timestamp.internalBinaryWrite(message.start, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp end = 2; */
        if (message.end)
            Timestamp.internalBinaryWrite(message.end, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Scan.TimeRange
 */
export const Scan_TimeRange = new Scan_TimeRange$Type();
